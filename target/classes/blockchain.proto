// Copyright 2015 The gRPC Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

option java_multiple_files = true;
option java_package = "kademlia_public_ledger";
option java_outer_classname = "PL";
option objc_class_prefix = "";

// Interface exported by the server.
service P2P {
  // A simple gRPC.
  //
  // The PING RPC probes a node to see if it is online
  //
  rpc PING(NodeID) returns (BooleanSuccessResponse) {}

  // A simple gRPC
  //
  // The STORE RPC instructs a node to store pair for later retrieval
  //
  rpc STORE(Key_Value) returns (BooleanSuccessResponse) {}

  // A simple gRPC
  //
  // The FIND_NODE RPC takes a 160-bit ID as an argument.
  // The recipient of the RPC returns {IP address, UDP port, NodeID}
  // triples for k nodes it knows about closest to the target ID
  //
  rpc FIND_NODE(NodeID) returns (stream NodeInfo) {}

  // A simple gRPC
  //
  // The FIND_VALUE behaves like FIND_NODE - returning {IP address, UDP port, NodeID}
  // triples with one exception. If the rpc recipient has received
  // a store rpc for the key, it just returns the stored value
  //
  rpc FIND_VALUE(Key_Value) returns (stream NodeInfo) {}

  // A simple gRPC
  //
  // The FIND_VALUE behaves like FIND_NODE - returning {IP address, UDP port, NodeID}
  // triples with one exception. If the rpc recipient has received
  // a store rpc for the key, it just returns the stored value
  //
  rpc JOIN(NodeID) returns (Kbucket) {}

  // Get BlockChain
  rpc GETBlockChain(NodeInfo) returns (stream Block_) {}

}

message Kbucket {
  BooleanSuccessResponse response = 2;
  repeated NodeInfo brothers = 10;
  int32 i = 1;
}

message Key_Value {
  bytes key = 1;
  bytes kv = 2;
  string value = 4;
  BasicNode sender = 3;

}

message Block_ {
  string hash = 1;
  string previousHash = 2;
  string merkleRoot = 3;
  string data = 4;
  repeated Transaction_ transactions = 5;
  int64 timestamp = 6;
  int32 nonce = 7;
}

message Transaction_ {
  string transactionId = 1;
  string sender = 2;
  string reciepient = 3;
  int64 value = 4;
  bytes signature = 5;
  repeated TransactionInput_ inputs = 6;
  repeated TransactionOutput_ outputs = 7;
}

message TransactionInput_ {
  string transactionOutputId = 1;
  TransactionOutput_ UTXO = 2;
}

message TransactionOutput_ {
  string id = 1;
  string reciepient = 2;
  int64 value = 3;
  string parentTransactionId = 4;

}

message BooleanSuccessResponse {
  bool success = 1;
  
}

message NodeInfo {
  BasicNode node = 1;
  BasicNode sender = 2;
  string value = 3; 
}

message NodeID {
  bytes  nodeID = 1;
  BasicNode sender = 2;
}

message BasicNode {
  bytes nodeID = 1;
  string ip = 2;
  int32 port = 3;
  string client_name = 4;
}


message NodeInfoORValue {
}
