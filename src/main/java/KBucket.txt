import java.util.ArrayList;
import java.util.Arrays;

public class KBucket {

    class Range {
        int exp_i, exp_f;
        String value_i, value_f;
        
        Range(int i, int f) {
            this.exp_i = i;
            this.exp_f = f;
            for (int j=159; j>=0; j--) {
                if (j >= exp_i)
                    this.value_i += "0";
                else
                    this.value_i += "i";
                if (j >= exp_f)
                    this.value_f += "0";
                else
                    this.value_f += "i";    
            }
        }

        boolean inRange(String addr){
            
            for (int j=0; j<160; j++) { 
                if (this.value_i.charAt(j) == "0" && this.addr.charAt(j) == "0")
                    continue;
                else if (this.value_i.charAt(j) == "1" && this.addr.charAt(j) == "1")
                    continue;
                else if (this.value_i.charAt(j) == "0" && this.addr.charAt(j) == "1")
                    break;
                else if (this.value_i.charAt(j) == "1" && this.addr.charAt(j) == "0")
                    return false;
            }

            for (int j=0; j<160; j++) { 
                if (this.value_f.charAt(j) == "0" && this.addr.charAt(j) == "0")
                    continue;
                else if (this.value_f.charAt(j) == "1" && this.addr.charAt(j) == "1")
                    continue;
                else if (this.value_f.charAt(j) == "0" && this.addr.charAt(j) == "1")
                    return false;;
                else if (this.value_f.charAt(j) == "1" && this.addr.charAt(j) == "0")
                    break;
            }
            return true;
        }

        void split() {
            this.exp_f /= 2;
            Range(exp_i, exp_f);
        }
    }

    private ArrayList<Node> nodes=new ArrayList<Node>();
    private byte[] initial_addr= new byte[20];
    //private int count = 1;
    private int k = 1;
    private Range range;

    public enum ADD {
        ADDED,
        OUTOFRANGE,
        SPLIT,
        FULL
    }

    Kbucket(int i, int f) {
        // generate 20 bytes ou 160 bits random 
        Random rd = new Random();
        rd.nextBytes(initial_addr);
        this.range = new Range(i, f);
    }

    public String getAdrressStr() {
        String aux = "";
        for (int i = 0; i < initial_addr.length; i++) {
            aux += String.format("%8s", Integer.toBinaryString(initial_addr[i] & 0xFF)).replace(' ', '0');
        }
        return aux;
    }

    public ADD add_to_KBucket(Node node){
        String id = node.getBinaryStr();
        String iaddr = getAdrressStr();

        // if initial address and nodeId are in the starting range
        if (range.inRange(iaddr) && range.inRange(id)) {
            if (nodes.size() < k) {
                nodes.add(node);
                return ADD.ADDED;
            } else {
                range.split();
                
                return ADD.SPLIT;
            }
        } else if (range.inRange(id)){
            if (nodes.size() < k) {
                nodes.add(node);
                return ADD.ADDED;
            } else {
                return ADD.FULL;
            }
        } else {
            return ADD.OUTOFRANGE;
        }
    }

    public ArrayList<Node> split() {
        //
    }

    public ArrayList<Node> getKbucket() {
        return nodes;
    }
    public void to_String(){
        //System.out.println(Arrays.toString(Kbucket.toArray()));
        for (int i = 0; i < nodes.size(); i++) {
            Node temp=nodes.get(i);
            temp.to_String();
        }
        if(nodes.size()==0){
            System.out.println("No entries in this KBucket yet");
        }
    }
}